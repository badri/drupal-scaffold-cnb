package node

import (
	"fmt"
	"github.com/cloudfoundry/packit"
	"os"
	"os/exec"
	"path/filepath"
)

const autoloadPhp = `<?php

/**
 * @file
 * Includes the autoloader created by Composer.
 *
 * This file was generated by drupal-composer/drupal-scaffold.
 * https://github.com/drupal-composer/drupal-scaffold
 *
 * @see composer.json
 * @see index.php
 * @see core/install.php
 * @see core/rebuild.php
 * @see core/modules/statistics/statistics.php
 */

return require __DIR__ . '/../vendor/autoload.php';
`

func Build() packit.BuildFunc {
	return func(context packit.BuildContext) (packit.BuildResult, error) {
		nodeLayer, err := context.Layers.Get("drupal-scaffold", packit.LaunchLayer)
		if err != nil {
			return packit.BuildResult{}, err
		}

		err = nodeLayer.Reset()
		if err != nil {
			return packit.BuildResult{}, err
		}
		// fix autoload
		autoload := filepath.Join(context.WorkingDir, "web", "autoload.php")
		if _, err = os.Stat(autoload); err == nil {
			file, err := os.Create(autoload)
			if err != nil {
				return packit.BuildResult{}, fmt.Errorf("failed to open autload.php: %w", err)
			}
			defer file.Close()

			_, err = file.WriteString(autoloadPhp)
			if err != nil {
				file.Close()
				return packit.BuildResult{}, fmt.Errorf("failed to reset autoload.php: %w", err)
			}
		} else {
			fmt.Printf("No autoload.php found\n")
		}
		// run NPM
		fmt.Println("Running npm...")
		cmd := exec.Command("npm",
			"install",
		)
		cmd.Dir = filepath.Join(context.WorkingDir, "web/themes/custom/lakshminp_theme")
		err2 := cmd.Run()

		if err2 != nil {
			return packit.BuildResult{}, err2
		}

		return packit.BuildResult{
			Plan: context.Plan,
			Layers: []packit.Layer{
				nodeLayer,
			},
		}, nil
	}
}
